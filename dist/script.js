(()=>{"use strict";var t={684:(t,e,o)=>{o.r(e)},303:function(t,e,o){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=o(724),r=s(o(570));o(684);var n=["#D81C01","#E9967A","#BA55D3","#FFD700","#FFE4B5","#FF8C00","#228B22","#90EE90","#4169E1","#00BFFF","#8B4513","#00CED1"],a=0,l=new r.default("canvas1");l.setup({iterator:function(){return a<1e6?(a++,{x:i.randomInt(32e3),y:i.randomInt(16e3),shape:i.randomInt(3),size:10+i.randomInt(21),color:i.randomInt(n.length)}):(a=0,null)},colors:n,grid:{width:32e3,height:16e3},debug:{isEnable:!0},demo:{isEnable:!1}}),l.run()},360:(t,e)=>{function o(t,e){return[e[0]*t[0]+e[1]*t[3]+e[2]*t[6],e[0]*t[1]+e[1]*t[4]+e[2]*t[7],e[0]*t[2]+e[1]*t[5]+e[2]*t[8],e[3]*t[0]+e[4]*t[3]+e[5]*t[6],e[3]*t[1]+e[4]*t[4]+e[5]*t[7],e[3]*t[2]+e[4]*t[5]+e[5]*t[8],e[6]*t[0]+e[7]*t[3]+e[8]*t[6],e[6]*t[1]+e[7]*t[4]+e[8]*t[7],e[6]*t[2]+e[7]*t[5]+e[8]*t[8]]}function s(t,e){return[1,0,0,0,1,0,t,e,1]}function i(t,e){return[t,0,0,0,e,0,0,0,1]}Object.defineProperty(e,"__esModule",{value:!0}),e.inverse=e.transformPoint=e.scale=e.scaling=e.translate=e.translation=e.projection=e.identity=e.multiply=void 0,e.multiply=o,e.identity=function(){return[1,0,0,0,1,0,0,0,1]},e.projection=function(t,e){return[2/t,0,0,0,-2/e,0,-1,1,1]},e.translation=s,e.translate=function(t,e,i){return o(t,s(e,i))},e.scaling=i,e.scale=function(t,e,s){return o(t,i(e,s))},e.transformPoint=function(t,e){var o=e[0]*t[2]+e[1]*t[5]+t[8];return[(e[0]*t[0]+e[1]*t[3]+t[6])/o,(e[0]*t[1]+e[1]*t[4]+t[7])/o]},e.inverse=function(t){var e=t[4]*t[8]-t[5]*t[7],o=t[1]*t[8]-t[2]*t[7],s=t[1]*t[5]-t[2]*t[4],i=1/(t[0]*e-t[3]*o+t[6]*s);return[i*e,-i*o,i*s,-i*(t[3]*t[8]-t[5]*t[6]),i*(t[0]*t[8]-t[2]*t[6]),-i*(t[0]*t[5]-t[2]*t[3]),i*(t[3]*t[7]-t[4]*t[6]),-i*(t[0]*t[7]-t[1]*t[6]),i*(t[0]*t[4]-t[1]*t[3])]}},883:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SHAPES=e.FRAGMENT_TEMPLATE=e.VERTEX_TEMPLATE=void 0,e.VERTEX_TEMPLATE="\nattribute vec2 a_position;\nattribute float a_color;\nattribute float a_size;\nattribute float a_shape;\nuniform mat3 u_matrix;\nvarying vec3 v_color;\nvarying float v_shape;\nvoid main() {\n  gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0.0, 1.0);\n  gl_PointSize = a_size;\n  v_shape = a_shape;\n  {COLOR-CODE}\n}\n",e.FRAGMENT_TEMPLATE="\nprecision lowp float;\nvarying vec3 v_color;\nvarying float v_shape;\nvoid main() {\n  {SHAPE-CODE}\n  gl_FragColor = vec4(v_color.rgb, 1.0);\n}\n",e.SHAPES=[],e.SHAPES[0]="",e.SHAPES[1]="\nif (length(gl_PointCoord - 0.5) > 0.5) {\n  discard;\n};\n",e.SHAPES[2]="\nif (\n  ((gl_PointCoord.x < 0.3) && (gl_PointCoord.y < 0.3)) ||\n  ((gl_PointCoord.x > 0.7) && (gl_PointCoord.y < 0.3)) ||\n  ((gl_PointCoord.x > 0.7) && (gl_PointCoord.y > 0.7)) ||\n  ((gl_PointCoord.x < 0.3) && (gl_PointCoord.y > 0.7))\n  ) {\n    discard;\n};\n"},55:function(t,e,o){var s=this&&this.__createBinding||(Object.create?function(t,e,o,s){void 0===s&&(s=o),Object.defineProperty(t,s,{enumerable:!0,get:function(){return e[o]}})}:function(t,e,o,s){void 0===s&&(s=o),t[s]=e[o]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),r=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var o in t)"default"!==o&&Object.prototype.hasOwnProperty.call(t,o)&&s(e,t,o);return i(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var n=r(o(360)),a=function(){function t(t){this.splot=t,this.transform={viewProjectionMat:[],startInvViewProjMat:[],startCamera:{x:0,y:0,zoom:1},startPos:[],startClipPos:[],startMousePos:[]},this.handleMouseDownWithContext=this.handleMouseDown.bind(this),this.handleMouseWheelWithContext=this.handleMouseWheel.bind(this),this.handleMouseMoveWithContext=this.handleMouseMove.bind(this),this.handleMouseUpWithContext=this.handleMouseUp.bind(this)}return t.prototype.setup=function(){},t.prototype.run=function(){this.splot.canvas.addEventListener("mousedown",this.handleMouseDownWithContext),this.splot.canvas.addEventListener("wheel",this.handleMouseWheelWithContext)},t.prototype.stop=function(){this.splot.canvas.removeEventListener("mousedown",this.handleMouseDownWithContext),this.splot.canvas.removeEventListener("wheel",this.handleMouseWheelWithContext),this.splot.canvas.removeEventListener("mousemove",this.handleMouseMoveWithContext),this.splot.canvas.removeEventListener("mouseup",this.handleMouseUpWithContext)},t.prototype.makeCameraMatrix=function(){var t=1/this.splot.camera.zoom,e=n.identity();return e=n.translate(e,this.splot.camera.x,this.splot.camera.y),n.scale(e,t,t)},t.prototype.updateViewProjection=function(){var t=n.projection(this.splot.canvas.width,this.splot.canvas.height),e=this.makeCameraMatrix(),o=n.inverse(e);this.transform.viewProjectionMat=n.multiply(t,o)},t.prototype.getClipSpaceMousePosition=function(t){var e=this.splot.canvas.getBoundingClientRect(),o=t.clientX-e.left,s=t.clientY-e.top;return[o/this.splot.canvas.clientWidth*2-1,s/this.splot.canvas.clientHeight*-2+1]},t.prototype.moveCamera=function(t){var e=n.transformPoint(this.transform.startInvViewProjMat,this.getClipSpaceMousePosition(t));this.splot.camera.x=this.transform.startCamera.x+this.transform.startPos[0]-e[0],this.splot.camera.y=this.transform.startCamera.y+this.transform.startPos[1]-e[1],this.splot.render()},t.prototype.handleMouseMove=function(t){this.moveCamera(t)},t.prototype.handleMouseUp=function(t){this.splot.render(),t.target.removeEventListener("mousemove",this.handleMouseMoveWithContext),t.target.removeEventListener("mouseup",this.handleMouseUpWithContext)},t.prototype.handleMouseDown=function(t){t.preventDefault(),this.splot.canvas.addEventListener("mousemove",this.handleMouseMoveWithContext),this.splot.canvas.addEventListener("mouseup",this.handleMouseUpWithContext),this.transform.startInvViewProjMat=n.inverse(this.transform.viewProjectionMat),this.transform.startCamera=Object.assign({},this.splot.camera),this.transform.startClipPos=this.getClipSpaceMousePosition(t),this.transform.startPos=n.transformPoint(this.transform.startInvViewProjMat,this.transform.startClipPos),this.transform.startMousePos=[t.clientX,t.clientY],this.splot.render()},t.prototype.handleMouseWheel=function(t){t.preventDefault();var e=this.getClipSpaceMousePosition(t),o=e[0],s=e[1],i=n.transformPoint(n.inverse(this.transform.viewProjectionMat),[o,s]),r=i[0],a=i[1],l=this.splot.camera.zoom*Math.pow(2,-.01*t.deltaY);this.splot.camera.zoom=Math.max(.002,Math.min(200,l)),this.updateViewProjection();var h=n.transformPoint(n.inverse(this.transform.viewProjectionMat),[o,s]),u=h[0],c=h[1];this.splot.camera.x+=r-u,this.splot.camera.y+=a-c,this.splot.render()},t}();e.default=a},982:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0});var s=o(724),i=function(){function t(t){this.splot=t,this.isEnable=!1,this.headerStyle="font-weight: bold; color: #ffffff; background-color: #cc0000;",this.groupStyle="font-weight: bold; color: #ffffff;"}return t.prototype.setup=function(t){void 0===t&&(t=!1),t&&console.clear()},t.prototype.log=function(){for(var t=this,e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];this.isEnable&&e.forEach((function(e){if("function"!=typeof t[e])throw new Error("Отладочного блока "+e+'" не существует!');t[e]()}))},t.prototype.error=function(t){this.isEnable&&console.error(t)},t.prototype.intro=function(){console.log("%cОтладка SPlot на объекте #"+this.splot.canvas.id,this.headerStyle),this.splot.demo.isEnable&&console.log("%cВключен демонстрационный режим данных",this.groupStyle),console.group("%cПредупреждение",this.groupStyle),console.log("Открытая консоль браузера и другие активные средства контроля разработки существенно снижают производительность высоконагруженных приложений. Для объективного анализа производительности все подобные средства должны быть отключены, а консоль брzаузера закрыта. Некоторые данные отладочной информации в зависимости от используемого браузера могут не отображаться или отображаться некорректно. Средство отладки протестировано в браузере Google Chrome v.90"),console.groupEnd()},t.prototype.gpu=function(){console.group("%cВидеосистема",this.groupStyle),console.log("Графическая карта: "+this.splot.webgl.gpu.hardware),console.log("Версия GL: "+this.splot.webgl.gpu.software),console.groupEnd()},t.prototype.instance=function(){console.group("%cНастройка параметров экземпляра",this.groupStyle),console.dir(this.splot),console.log("Размер канваса: "+this.splot.canvas.width+" x "+this.splot.canvas.height+" px"),console.log("Размер плоскости: "+this.splot.grid.width+" x "+this.splot.grid.height+" px"),this.splot.demo.isEnable?console.log("Способ получения данных: демо-данные"):console.log("Способ получения данных: итерирование"),console.groupEnd()},t.prototype.shaders=function(){console.group("%cСоздан вершинный шейдер: ",this.groupStyle),console.log(this.splot.glsl.vertShaderSource),console.groupEnd(),console.group("%cСоздан фрагментный шейдер: ",this.groupStyle),console.log(this.splot.glsl.fragShaderSource),console.groupEnd()},t.prototype.loading=function(){console.log("%cЗапущен процесс загрузки данных ["+s.getCurrentTime()+"]...",this.groupStyle),console.time("Длительность")},t.prototype.loaded=function(){console.group("%cЗагрузка данных завершена ["+s.getCurrentTime()+"]",this.groupStyle),console.timeEnd("Длительность"),console.log("Расход видеопамяти: "+(this.splot.stats.memUsage/1e6).toFixed(2).toLocaleString()+" МБ"),console.log("Кол-во объектов: "+this.splot.stats.objTotalCount.toLocaleString()),console.log("Кол-во групп буферов: "+this.splot.stats.groupsCount.toLocaleString()),console.log("Результат: "+(this.splot.stats.objTotalCount>=this.splot.globalLimit?"достигнут лимит объектов ("+this.splot.globalLimit.toLocaleString()+")":"обработаны все объекты")),console.groupEnd()},t.prototype.started=function(){console.log("%cРендер запущен",this.groupStyle)},t.prototype.stoped=function(){console.log("%cРендер остановлен",this.groupStyle)},t.prototype.cleared=function(t){console.log("%cОбласть рендера очищена ["+t+"]",this.groupStyle)},t}();e.default=i},916:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0});var s=o(724),i=function(){function t(t){this.splot=t,this.isEnable=!1,this.amount=1e6,this.sizeMin=10,this.sizeMax=30,this.colors=["#D81C01","#E9967A","#BA55D3","#FFD700","#FFE4B5","#FF8C00","#228B22","#90EE90","#4169E1","#00BFFF","#8B4513","#00CED1"],this.index=0}return t.prototype.setup=function(){this.index=0,this.splot.demo.isEnable&&(this.splot.iterator=this.splot.demo.iterator.bind(this),this.splot.colors=this.splot.demo.colors)},t.prototype.iterator=function(){return this.index<this.amount?(this.index++,{x:s.randomInt(this.splot.grid.width),y:s.randomInt(this.splot.grid.height),shape:s.randomInt(this.splot.shapesCount),size:this.sizeMin+s.randomInt(this.sizeMax-this.sizeMin+1),color:s.randomInt(this.colors.length)}):null},t}();e.default=i},726:function(t,e,o){var s=this&&this.__createBinding||(Object.create?function(t,e,o,s){void 0===s&&(s=o),Object.defineProperty(t,s,{enumerable:!0,get:function(){return e[o]}})}:function(t,e,o,s){void 0===s&&(s=o),t[s]=e[o]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),r=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var o in t)"default"!==o&&Object.prototype.hasOwnProperty.call(t,o)&&s(e,t,o);return i(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var n=r(o(883)),a=o(724),l=function(){function t(t){this.splot=t,this.vertShaderSource="",this.fragShaderSource=""}return t.prototype.setup=function(){this.vertShaderSource=this.makeVertShaderSource(),this.fragShaderSource=this.makeFragShaderSource(),this.splot.shapesCount=n.SHAPES.length},t.prototype.makeVertShaderSource=function(){this.splot.colors.push(this.splot.grid.rulesColor);var t="";return this.splot.colors.forEach((function(e,o){var s=a.colorFromHexToGlRgb(e),i=s[0],r=s[1],n=s[2];t+="else if (a_color == "+o+".0) v_color = vec3("+i+", "+r+", "+n+");\n"})),this.splot.colors.pop(),t=t.slice(5),n.VERTEX_TEMPLATE.replace("{COLOR-CODE}",t).trim()},t.prototype.makeFragShaderSource=function(){var t="";return n.SHAPES.forEach((function(e,o){t+="else if (v_shape == "+o+".0) {\n "+e.trim()+"\n} "})),t=t.slice(5),n.FRAGMENT_TEMPLATE.replace("{SHAPE-CODE}",t).trim()},t}();e.default=l},765:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0});var s=o(724),i=function(){function t(t){this.splot=t,this.alpha=!1,this.depth=!1,this.stencil=!1,this.antialias=!1,this.desynchronized=!1,this.premultipliedAlpha=!1,this.preserveDrawingBuffer=!1,this.failIfMajorPerformanceCaveat=!1,this.powerPreference="high-performance",this.gpu={hardware:"-",software:"-"},this.variables=new Map,this.data=new Map,this.glNumberTypes=new Map([["Int8Array",5120],["Uint8Array",5121],["Int16Array",5122],["Uint16Array",5123],["Float32Array",5126]])}return t.prototype.setup=function(){if(this.gl=this.splot.canvas.getContext("webgl",{alpha:this.alpha,depth:this.depth,stencil:this.stencil,antialias:this.antialias,desynchronized:this.desynchronized,premultipliedAlpha:this.premultipliedAlpha,preserveDrawingBuffer:this.preserveDrawingBuffer,failIfMajorPerformanceCaveat:this.failIfMajorPerformanceCaveat,powerPreference:this.powerPreference}),null===this.gl)throw new Error("Ошибка создания контекста рендеринга WebGL!");var t=this.gl.getExtension("WEBGL_debug_renderer_info");this.gpu.hardware=t?this.gl.getParameter(t.UNMASKED_RENDERER_WEBGL):"[неизвестно]",this.gpu.software=this.gl.getParameter(this.gl.VERSION),this.splot.debug.log("gpu"),this.splot.canvas.width=this.splot.canvas.clientWidth,this.splot.canvas.height=this.splot.canvas.clientHeight,this.gl.viewport(0,0,this.splot.canvas.width,this.splot.canvas.height),"grid"in this.splot.lastRequestedOptions&&!("camera"in this.splot.lastRequestedOptions)&&(this.splot.camera.x=this.splot.grid.width/2,this.splot.camera.y=this.splot.grid.height/2),this.setBgColor(this.splot.grid.bgColor),this.createProgram(this.splot.glsl.vertShaderSource,this.splot.glsl.fragShaderSource)},t.prototype.setBgColor=function(t){var e=s.colorFromHexToGlRgb(t),o=e[0],i=e[1],r=e[2];this.gl.clearColor(o,i,r,0)},t.prototype.clearBackground=function(){this.gl.clear(this.gl.COLOR_BUFFER_BIT)},t.prototype.createShader=function(t,e){var o=this.gl.createShader(this.gl[t]);if(this.gl.shaderSource(o,e),this.gl.compileShader(o),!this.gl.getShaderParameter(o,this.gl.COMPILE_STATUS))throw new Error("Ошибка компиляции шейдера ["+t+"]. "+this.gl.getShaderInfoLog(o));return o},t.prototype.createProgramFromShaders=function(t,e){this.gpuProgram=this.gl.createProgram(),this.gl.attachShader(this.gpuProgram,t),this.gl.attachShader(this.gpuProgram,e),this.gl.linkProgram(this.gpuProgram),this.gl.useProgram(this.gpuProgram)},t.prototype.createProgram=function(t,e){this.splot.debug.log("shaders"),this.createProgramFromShaders(this.createShader("VERTEX_SHADER",t),this.createShader("FRAGMENT_SHADER",e))},t.prototype.createVariable=function(t){var e=t.slice(0,2);if("u_"===e)this.variables.set(t,this.gl.getUniformLocation(this.gpuProgram,t));else{if("a_"!==e)throw new Error("Указан неверный тип (префикс) переменной шейдера: "+t);this.variables.set(t,this.gl.getAttribLocation(this.gpuProgram,t))}},t.prototype.createVariables=function(){for(var t=this,e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];e.forEach((function(e){return t.createVariable(e)}))},t.prototype.createBuffer=function(t,e){var o=this.gl.createBuffer();return this.gl.bindBuffer(this.gl.ARRAY_BUFFER,o),this.gl.bufferData(this.gl.ARRAY_BUFFER,e,this.gl.STATIC_DRAW),this.data.has(t)||this.data.set(t,{buffers:[],type:this.glNumberTypes.get(e.constructor.name)}),this.data.get(t).buffers.push(o),e.length*e.BYTES_PER_ELEMENT},t.prototype.setVariable=function(t,e){this.gl.uniformMatrix3fv(this.variables.get(t),!1,e)},t.prototype.setBuffer=function(t,e,o,s,i,r){var n=this.data.get(t),a=this.variables.get(o);this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.buffers[e]),this.gl.enableVertexAttribArray(a),this.gl.vertexAttribPointer(a,s,n.type,!1,i,r)},t.prototype.drawPoints=function(t,e){this.gl.drawArrays(this.gl.POINTS,t,e)},t}();e.default=i},570:function(t,e,o){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=o(724),r=s(o(55)),n=s(o(765)),a=s(o(982)),l=s(o(916)),h=s(o(726)),u=function(){function t(t,e){if(this.iterator=void 0,this.debug=new a.default(this),this.glsl=new h.default(this),this.webgl=new n.default(this),this.demo=new l.default(this),this.forceRun=!1,this.globalLimit=1e9,this.groupLimit=1e4,this.colors=[],this.grid={width:32e3,height:16e3,bgColor:"#ffffff",rulesColor:"#c0c0c0"},this.camera={x:this.grid.width/2,y:this.grid.height/2,zoom:1},this.isRunning=!1,this.stats={objTotalCount:0,objInGroupCount:[],groupsCount:0,memUsage:0},this.lastRequestedOptions={},this.control=new r.default(this),this.isSetuped=!1,!document.getElementById(t))throw new Error('Канвас с идентификатором "#'+t+'" не найден!');this.canvas=document.getElementById(t),e&&(i.copyMatchingKeyValues(this,e),this.lastRequestedOptions=e,this.forceRun&&this.setup(e))}return t.prototype.setup=function(t){void 0===t&&(t={}),this.isSetuped=!0,i.copyMatchingKeyValues(this,t),this.lastRequestedOptions=t,this.checkSetup(),this.debug.log("intro"),this.debug.setup(),this.glsl.setup(),this.webgl.setup(),this.control.setup(),this.demo.setup(),this.debug.log("instance"),this.webgl.createVariables("a_position","a_color","a_size","a_shape","u_matrix"),this.loadData(),this.forceRun&&this.run()},t.prototype.loadData=function(){this.debug.log("loading");var t,e={vertices:[],colors:[],sizes:[],shapes:[]};this.stats={objTotalCount:0,objInGroupCount:[],groupsCount:0,memUsage:0};for(var o=0,s=!1;!s;)(s=null===(t=this.iterator())||this.stats.objTotalCount>=this.globalLimit)||(e.vertices.push(t.x,t.y),e.shapes.push(t.shape),e.sizes.push(t.size),e.colors.push(t.color),this.stats.objTotalCount++,o++),(o>=this.groupLimit||s)&&(this.stats.objInGroupCount[this.stats.groupsCount]=o,this.stats.memUsage+=this.webgl.createBuffer("vertices",new Float32Array(e.vertices))+this.webgl.createBuffer("colors",new Uint8Array(e.colors))+this.webgl.createBuffer("shapes",new Uint8Array(e.shapes))+this.webgl.createBuffer("sizes",new Float32Array(e.sizes))),o>=this.groupLimit&&!s&&(this.stats.groupsCount++,e={vertices:[],colors:[],sizes:[],shapes:[]},o=0);this.debug.log("loaded")},t.prototype.render=function(){this.webgl.clearBackground(),this.control.updateViewProjection(),this.webgl.setVariable("u_matrix",this.control.transform.viewProjectionMat);for(var t=0;t<this.stats.groupsCount;t++)this.webgl.setBuffer("vertices",t,"a_position",2,0,0),this.webgl.setBuffer("colors",t,"a_color",1,0,0),this.webgl.setBuffer("sizes",t,"a_size",1,0,0),this.webgl.setBuffer("shapes",t,"a_shape",1,0,0),this.webgl.drawPoints(0,this.stats.objInGroupCount[t])},t.prototype.checkSetup=function(){if(this.isSetuped||this.setup(),!this.iterator)throw new Error("Не задана функция итерирования объектов!")},t.prototype.run=function(){this.checkSetup(),this.isRunning||(this.render(),this.control.run(),this.isRunning=!0,this.debug.log("started"))},t.prototype.stop=function(){this.checkSetup(),this.isRunning&&(this.control.stop(),this.isRunning=!1,this.debug.log("stoped"))},t.prototype.clear=function(){this.checkSetup(),this.webgl.clearBackground(),this.debug.log("cleared")},t}();e.default=u},724:(t,e)=>{function o(t){return"[object Object]"===Object.prototype.toString.call(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.getCurrentTime=e.colorFromHexToGlRgb=e.randomInt=e.copyMatchingKeyValues=e.isObject=void 0,e.isObject=o,e.copyMatchingKeyValues=function t(e,s){Object.keys(s).forEach((function(i){i in e&&(o(s[i])?o(e[i])&&t(e[i],s[i]):o(e[i])||"function"==typeof e[i]||(e[i]=s[i]))}))},e.randomInt=function(t){return Math.floor(Math.random()*t)},e.colorFromHexToGlRgb=function(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t),o=[parseInt(e[1],16)/255,parseInt(e[2],16)/255,parseInt(e[3],16)/255];return[o[0],o[1],o[2]]},e.getCurrentTime=function(){var t=new Date;return[t.getHours().toString().padStart(2,"0"),t.getMinutes().toString().padStart(2,"0"),t.getSeconds().toString().padStart(2,"0")].join(":")}}},e={};function o(s){var i=e[s];if(void 0!==i)return i.exports;var r=e[s]={exports:{}};return t[s].call(r.exports,r,r.exports,o),r.exports}o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o(303)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,